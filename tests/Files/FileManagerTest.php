<?php


use EMedia\PHPHelpers\Exceptions\FileSystem\FileNotFoundException as FileNotFoundExceptionAlias;
use EMedia\PHPHelpers\Files\FileManager;

class FileManagerTest extends \PHPUnit\Framework\TestCase
{

    private static $file = '_file_manager_test.txt';
    private static $fileContent = 'foo';

    protected function setUp()
    {
        parent::setUp();
        file_put_contents(static::$file, static::$fileContent);
    }
    
    protected function tearDown()
    {
        unlink(static::$file);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function test_FileManager_isTextInFile_requires_a_file()
    {
        $this->expectException(FileNotFoundExceptionAlias::class);
        FileManager::isTextInFile("_missing.txt", 'foo');
    }

    /**
     * @test
     */
    public function test_FileManager_isTextInFile_is_case_sensitive()
    {
        $this->assertTrue(FileManager::isTextInFile(static::$file, static::$fileContent));
        $this->assertFalse(FileManager::isTextInFile(static::$file, ucfirst(static::$fileContent)));
    }

    /**
     * @test
     */
    public function test_FileManager_isTextInFile_is_case_insensitive()
    {
        $this->assertTrue(FileManager::isTextInFile(static::$file, static::$fileContent, false));
        $this->assertTrue(FileManager::isTextInFile(static::$file, ucfirst(static::$fileContent), false));
    }

    /**
     * @test
     */
    public function test_FileManager_areFilesSimilar_requires_second_file()
    {
        $this->assertTrue(file_exists(static::$file));
        $this->expectException(FileNotFoundExceptionAlias::class);
        FileManager::areFilesSimilar(static::$file, "_missing.txt");
    }

    /**
     * @test
     */
    public function test_FileManager_areFilesSimilar_requires_first_file()
    {
        $this->assertTrue(file_exists(static::$file));
        $this->expectException(FileNotFoundExceptionAlias::class);
        FileManager::areFilesSimilar("_missing.txt", static::$file);
    }

    /**
     * @test
     */
    public function test_FileManager_areFilesSimilar_checks_if_similar()
    {
        $differentFile = '_file_manager_different-file.txt';
        file_put_contents($differentFile, 'bar');

        $this->assertFalse(FileManager::areFilesSimilar(static::$file, $differentFile));

        $similarFile = '_file_manager_similar-file.txt';
        file_put_contents($similarFile, static::$fileContent);

        $this->assertTrue(FileManager::areFilesSimilar(static::$file, $similarFile));

        unlink($differentFile);
        unlink($similarFile);
    }

    /**
     * @test
     */
    public function test_FileManager_readFirstLine_returns_with_whitespace()
    {
        $content = "bar";
        $contentWithWhitespace = "{$content}\n";
        file_put_contents(static::$file, $contentWithWhitespace);

        $this->assertNotEquals($content, FileManager::readFirstLine(static::$file, false));
        $this->assertEquals($contentWithWhitespace, FileManager::readFirstLine(static::$file, false));
    }

    /**
     * @test
     */
    public function test_FileManager_readFirstLine_removes_whitespace()
    {
        $content = "bar";
        $contentWithWhitespace = "{$content}\n";
        file_put_contents(static::$file, $contentWithWhitespace);

        $this->assertEquals($content, FileManager::readFirstLine(static::$file));
    }
}